{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Dependencies\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "Pyber_city = pd.read_csv(\"02-Homework_05-Matplotlib_Instructions_Pyber_data_city_data (1).csv\")\n",
    "Pyber_ride = pd.read_csv(\"02-Homework_05-Matplotlib_Instructions_Pyber_data_ride_data.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>driver_count</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Richardfort</td>\n",
       "      <td>38</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Williamsstad</td>\n",
       "      <td>59</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           city  driver_count   type\n",
       "0   Richardfort            38  Urban\n",
       "1  Williamsstad            59  Urban"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Pyber_city.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>date</th>\n",
       "      <th>fare</th>\n",
       "      <th>ride_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lake Jonathanshire</td>\n",
       "      <td>2018-01-14 10:14:22</td>\n",
       "      <td>13.83</td>\n",
       "      <td>5739410935873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>South Michelleport</td>\n",
       "      <td>2018-03-04 18:24:09</td>\n",
       "      <td>30.24</td>\n",
       "      <td>2343912425577</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 city                 date   fare        ride_id\n",
       "0  Lake Jonathanshire  2018-01-14 10:14:22  13.83  5739410935873\n",
       "1  South Michelleport  2018-03-04 18:24:09  30.24  2343912425577"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Pyber_ride.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop one duplicate record with same city name, same ride_ids but different # of drivers\n",
    "Pyber_city = Pyber_city.drop_duplicates('city', keep = 'first')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>driver_count</th>\n",
       "      <th>type</th>\n",
       "      <th>date</th>\n",
       "      <th>fare</th>\n",
       "      <th>ride_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Richardfort</td>\n",
       "      <td>38</td>\n",
       "      <td>Urban</td>\n",
       "      <td>2018-02-24 08:40:38</td>\n",
       "      <td>13.93</td>\n",
       "      <td>5628545007794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Richardfort</td>\n",
       "      <td>38</td>\n",
       "      <td>Urban</td>\n",
       "      <td>2018-02-13 12:46:07</td>\n",
       "      <td>14.00</td>\n",
       "      <td>910050116494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Richardfort</td>\n",
       "      <td>38</td>\n",
       "      <td>Urban</td>\n",
       "      <td>2018-02-16 13:52:19</td>\n",
       "      <td>17.92</td>\n",
       "      <td>820639054416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Richardfort</td>\n",
       "      <td>38</td>\n",
       "      <td>Urban</td>\n",
       "      <td>2018-02-01 20:18:28</td>\n",
       "      <td>10.26</td>\n",
       "      <td>9554935945413</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          city  driver_count   type                 date   fare        ride_id\n",
       "0  Richardfort            38  Urban  2018-02-24 08:40:38  13.93  5628545007794\n",
       "1  Richardfort            38  Urban  2018-02-13 12:46:07  14.00   910050116494\n",
       "2  Richardfort            38  Urban  2018-02-16 13:52:19  17.92   820639054416\n",
       "3  Richardfort            38  Urban  2018-02-01 20:18:28  10.26  9554935945413"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combine the data into a single dataset\n",
    "\n",
    "# Display the data table for preview\n",
    "combined_pyber_data = pd.merge(Pyber_city, Pyber_ride, on=\"city\")\n",
    "combined_pyber_data.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fun starts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "color_scheme = {'Red':'#FFD700', 'Blue':'#87CEFA', 'Yellow':'#F08080'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "city_color = {'Urban': color_scheme['Red'], 'Suburban': color_scheme['Blue'], 'Rural': color_scheme['Yellow']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "by_city = combined_pyber_data.groupby('city')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "avg_fare = by_city.mean()['fare']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "ride_count = by_city['ride_id'].count()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "driver_count = by_city.mean()['driver_count']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "city_type = Pyber_city.set_index('city')['type']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "city_info = pd.DataFrame({\"Number of Rides\": ride_count,\"Average Fare\": avg_fare,\"Number of Drivers\": driver_count,\"Type of City\": city_type})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of Rides</th>\n",
       "      <th>Average Fare</th>\n",
       "      <th>Number of Drivers</th>\n",
       "      <th>Type of City</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>West Samuelburgh</th>\n",
       "      <td>25</td>\n",
       "      <td>21.767600</td>\n",
       "      <td>73.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Michelleport</th>\n",
       "      <td>31</td>\n",
       "      <td>24.451613</td>\n",
       "      <td>72.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Anthony</th>\n",
       "      <td>30</td>\n",
       "      <td>24.736667</td>\n",
       "      <td>70.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liumouth</th>\n",
       "      <td>33</td>\n",
       "      <td>26.150000</td>\n",
       "      <td>69.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Port Angela</th>\n",
       "      <td>19</td>\n",
       "      <td>23.836842</td>\n",
       "      <td>67.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Reynoldsfurt</th>\n",
       "      <td>19</td>\n",
       "      <td>21.919474</td>\n",
       "      <td>67.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>East Kaylahaven</th>\n",
       "      <td>29</td>\n",
       "      <td>23.757931</td>\n",
       "      <td>65.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Royland</th>\n",
       "      <td>30</td>\n",
       "      <td>20.570667</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jerryton</th>\n",
       "      <td>25</td>\n",
       "      <td>25.649200</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Grahamburgh</th>\n",
       "      <td>25</td>\n",
       "      <td>25.221200</td>\n",
       "      <td>61.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Williamsstad</th>\n",
       "      <td>23</td>\n",
       "      <td>24.362174</td>\n",
       "      <td>59.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pattyland</th>\n",
       "      <td>21</td>\n",
       "      <td>23.980476</td>\n",
       "      <td>59.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lake Scottton</th>\n",
       "      <td>24</td>\n",
       "      <td>23.809167</td>\n",
       "      <td>58.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Port Samanthamouth</th>\n",
       "      <td>25</td>\n",
       "      <td>25.642800</td>\n",
       "      <td>57.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Gabriel</th>\n",
       "      <td>23</td>\n",
       "      <td>20.346087</td>\n",
       "      <td>57.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carriemouth</th>\n",
       "      <td>27</td>\n",
       "      <td>28.314444</td>\n",
       "      <td>52.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Jacobville</th>\n",
       "      <td>18</td>\n",
       "      <td>26.765556</td>\n",
       "      <td>50.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Deanville</th>\n",
       "      <td>19</td>\n",
       "      <td>25.842632</td>\n",
       "      <td>49.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Angela</th>\n",
       "      <td>39</td>\n",
       "      <td>25.990000</td>\n",
       "      <td>48.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roberthaven</th>\n",
       "      <td>24</td>\n",
       "      <td>23.729167</td>\n",
       "      <td>47.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Jack</th>\n",
       "      <td>19</td>\n",
       "      <td>22.965263</td>\n",
       "      <td>46.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Williamsview</th>\n",
       "      <td>20</td>\n",
       "      <td>26.599000</td>\n",
       "      <td>46.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Josephberg</th>\n",
       "      <td>26</td>\n",
       "      <td>21.720385</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Valentineton</th>\n",
       "      <td>22</td>\n",
       "      <td>24.636364</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Paulton</th>\n",
       "      <td>19</td>\n",
       "      <td>27.820000</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Paulville</th>\n",
       "      <td>22</td>\n",
       "      <td>21.675909</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Christopherfurt</th>\n",
       "      <td>27</td>\n",
       "      <td>24.501852</td>\n",
       "      <td>41.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Joneschester</th>\n",
       "      <td>25</td>\n",
       "      <td>22.289600</td>\n",
       "      <td>39.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Justinberg</th>\n",
       "      <td>30</td>\n",
       "      <td>23.694333</td>\n",
       "      <td>39.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Robert</th>\n",
       "      <td>31</td>\n",
       "      <td>25.123871</td>\n",
       "      <td>39.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>East Aaronbury</th>\n",
       "      <td>9</td>\n",
       "      <td>25.661111</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Jennifer</th>\n",
       "      <td>7</td>\n",
       "      <td>35.264286</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Garzaport</th>\n",
       "      <td>3</td>\n",
       "      <td>24.123333</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Port David</th>\n",
       "      <td>22</td>\n",
       "      <td>25.855000</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Michaelberg</th>\n",
       "      <td>12</td>\n",
       "      <td>34.997500</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North Jason</th>\n",
       "      <td>35</td>\n",
       "      <td>22.743714</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Penaborough</th>\n",
       "      <td>5</td>\n",
       "      <td>35.246000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lake Jonathanshire</th>\n",
       "      <td>24</td>\n",
       "      <td>23.425833</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>East Marymouth</th>\n",
       "      <td>27</td>\n",
       "      <td>30.835185</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Karenside</th>\n",
       "      <td>28</td>\n",
       "      <td>27.453571</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lake Jamie</th>\n",
       "      <td>6</td>\n",
       "      <td>34.358333</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Kimmouth</th>\n",
       "      <td>20</td>\n",
       "      <td>29.871500</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Karenland</th>\n",
       "      <td>38</td>\n",
       "      <td>26.535526</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Heather</th>\n",
       "      <td>9</td>\n",
       "      <td>33.890000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Harringtonfort</th>\n",
       "      <td>6</td>\n",
       "      <td>33.470000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lake Robertside</th>\n",
       "      <td>25</td>\n",
       "      <td>31.262000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lewisland</th>\n",
       "      <td>17</td>\n",
       "      <td>34.614118</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lake Ann</th>\n",
       "      <td>12</td>\n",
       "      <td>30.890000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Port Johnbury</th>\n",
       "      <td>22</td>\n",
       "      <td>23.006364</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Grayville</th>\n",
       "      <td>15</td>\n",
       "      <td>27.763333</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lake Latoyabury</th>\n",
       "      <td>11</td>\n",
       "      <td>26.061818</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Williamsonville</th>\n",
       "      <td>14</td>\n",
       "      <td>31.875000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Ryantown</th>\n",
       "      <td>6</td>\n",
       "      <td>43.278333</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North Jaime</th>\n",
       "      <td>8</td>\n",
       "      <td>30.802500</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jessicaport</th>\n",
       "      <td>6</td>\n",
       "      <td>36.013333</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Marychester</th>\n",
       "      <td>8</td>\n",
       "      <td>41.870000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Taylorhaven</th>\n",
       "      <td>6</td>\n",
       "      <td>42.263333</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Newtonview</th>\n",
       "      <td>4</td>\n",
       "      <td>36.745000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Brenda</th>\n",
       "      <td>24</td>\n",
       "      <td>33.964583</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North Richardhaven</th>\n",
       "      <td>14</td>\n",
       "      <td>24.704286</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Suburban</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Number of Rides  Average Fare  Number of Drivers  \\\n",
       "West Samuelburgh                 25     21.767600               73.0   \n",
       "South Michelleport               31     24.451613               72.0   \n",
       "West Anthony                     30     24.736667               70.0   \n",
       "Liumouth                         33     26.150000               69.0   \n",
       "Port Angela                      19     23.836842               67.0   \n",
       "Reynoldsfurt                     19     21.919474               67.0   \n",
       "East Kaylahaven                  29     23.757931               65.0   \n",
       "Royland                          30     20.570667               64.0   \n",
       "Jerryton                         25     25.649200               64.0   \n",
       "Grahamburgh                      25     25.221200               61.0   \n",
       "Williamsstad                     23     24.362174               59.0   \n",
       "Pattyland                        21     23.980476               59.0   \n",
       "Lake Scottton                    24     23.809167               58.0   \n",
       "Port Samanthamouth               25     25.642800               57.0   \n",
       "West Gabriel                     23     20.346087               57.0   \n",
       "Carriemouth                      27     28.314444               52.0   \n",
       "New Jacobville                   18     26.765556               50.0   \n",
       "Deanville                        19     25.842632               49.0   \n",
       "West Angela                      39     25.990000               48.0   \n",
       "Roberthaven                      24     23.729167               47.0   \n",
       "South Jack                       19     22.965263               46.0   \n",
       "Williamsview                     20     26.599000               46.0   \n",
       "West Josephberg                  26     21.720385               45.0   \n",
       "Valentineton                     22     24.636364               45.0   \n",
       "New Paulton                      19     27.820000               44.0   \n",
       "New Paulville                    22     21.675909               44.0   \n",
       "Christopherfurt                  27     24.501852               41.0   \n",
       "Joneschester                     25     22.289600               39.0   \n",
       "Justinberg                       30     23.694333               39.0   \n",
       "West Robert                      31     25.123871               39.0   \n",
       "...                             ...           ...                ...   \n",
       "East Aaronbury                    9     25.661111                7.0   \n",
       "South Jennifer                    7     35.264286                7.0   \n",
       "Garzaport                         3     24.123333                7.0   \n",
       "Port David                       22     25.855000                7.0   \n",
       "Michaelberg                      12     34.997500                6.0   \n",
       "North Jason                      35     22.743714                6.0   \n",
       "Penaborough                       5     35.246000                6.0   \n",
       "Lake Jonathanshire               24     23.425833                5.0   \n",
       "East Marymouth                   27     30.835185                5.0   \n",
       "Karenside                        28     27.453571                5.0   \n",
       "Lake Jamie                        6     34.358333                4.0   \n",
       "West Kimmouth                    20     29.871500                4.0   \n",
       "South Karenland                  38     26.535526                4.0   \n",
       "West Heather                      9     33.890000                4.0   \n",
       "Harringtonfort                    6     33.470000                4.0   \n",
       "Lake Robertside                  25     31.262000                4.0   \n",
       "Lewisland                        17     34.614118                4.0   \n",
       "Lake Ann                         12     30.890000                3.0   \n",
       "Port Johnbury                    22     23.006364                3.0   \n",
       "Grayville                        15     27.763333                2.0   \n",
       "Lake Latoyabury                  11     26.061818                2.0   \n",
       "Williamsonville                  14     31.875000                2.0   \n",
       "New Ryantown                      6     43.278333                2.0   \n",
       "North Jaime                       8     30.802500                1.0   \n",
       "Jessicaport                       6     36.013333                1.0   \n",
       "South Marychester                 8     41.870000                1.0   \n",
       "Taylorhaven                       6     42.263333                1.0   \n",
       "Newtonview                        4     36.745000                1.0   \n",
       "South Brenda                     24     33.964583                1.0   \n",
       "North Richardhaven               14     24.704286                1.0   \n",
       "\n",
       "                   Type of City  \n",
       "West Samuelburgh          Urban  \n",
       "South Michelleport        Urban  \n",
       "West Anthony              Urban  \n",
       "Liumouth                  Urban  \n",
       "Port Angela               Urban  \n",
       "Reynoldsfurt              Urban  \n",
       "East Kaylahaven           Urban  \n",
       "Royland                   Urban  \n",
       "Jerryton                  Urban  \n",
       "Grahamburgh               Urban  \n",
       "Williamsstad              Urban  \n",
       "Pattyland                 Urban  \n",
       "Lake Scottton             Urban  \n",
       "Port Samanthamouth        Urban  \n",
       "West Gabriel              Urban  \n",
       "Carriemouth               Urban  \n",
       "New Jacobville            Urban  \n",
       "Deanville                 Urban  \n",
       "West Angela               Urban  \n",
       "Roberthaven               Urban  \n",
       "South Jack                Urban  \n",
       "Williamsview              Urban  \n",
       "West Josephberg           Urban  \n",
       "Valentineton              Urban  \n",
       "New Paulton               Urban  \n",
       "New Paulville             Urban  \n",
       "Christopherfurt           Urban  \n",
       "Joneschester              Urban  \n",
       "Justinberg                Urban  \n",
       "West Robert               Urban  \n",
       "...                         ...  \n",
       "East Aaronbury         Suburban  \n",
       "South Jennifer            Rural  \n",
       "Garzaport                 Rural  \n",
       "Port David                Urban  \n",
       "Michaelberg               Rural  \n",
       "North Jason               Urban  \n",
       "Penaborough               Rural  \n",
       "Lake Jonathanshire        Urban  \n",
       "East Marymouth         Suburban  \n",
       "Karenside                 Urban  \n",
       "Lake Jamie                Rural  \n",
       "West Kimmouth          Suburban  \n",
       "South Karenland           Urban  \n",
       "West Heather              Rural  \n",
       "Harringtonfort            Rural  \n",
       "Lake Robertside        Suburban  \n",
       "Lewisland              Suburban  \n",
       "Lake Ann               Suburban  \n",
       "Port Johnbury             Urban  \n",
       "Grayville              Suburban  \n",
       "Lake Latoyabury           Rural  \n",
       "Williamsonville        Suburban  \n",
       "New Ryantown              Rural  \n",
       "North Jaime               Rural  \n",
       "Jessicaport               Rural  \n",
       "South Marychester         Rural  \n",
       "Taylorhaven               Rural  \n",
       "Newtonview                Rural  \n",
       "South Brenda           Suburban  \n",
       "North Richardhaven     Suburban  \n",
       "\n",
       "[120 rows x 4 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "city_info.sort_values('Number of Drivers', ascending = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "rural = city_info[city_info['Type of City'] == 'Rural']\n",
    "suburban = city_info[city_info['Type of City'] == 'Suburban']\n",
    "urban = city_info[city_info['Type of City'] == 'Urban']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "city_color = {'Urban': color_scheme['Red'], 'Suburban': color_scheme['Blue'], 'Rural': color_scheme['Yellow']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11cb51710>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(rural['Number of Rides'], rural['Average Fare'], s = rural['Number of Drivers']*10, color = city_color['Rural'], edgecolor = 'black', label = 'Rural', alpha = .75)\n",
    "plt.scatter(suburban['Number of Rides'], suburban['Average Fare'], s = suburban['Number of Drivers']*10, color = city_color['Suburban'], edgecolor = 'black', label = 'Suburban', alpha = .75)\n",
    "plt.scatter(urban['Number of Rides'], urban['Average Fare'], s = urban['Number of Drivers']*10, color = city_color['Urban'], edgecolor = 'black', label = 'Urban', alpha = .75)\n",
    "plt.title('Pyber ride sharing Data 2016')\n",
    "plt.xlabel('Total Number of Rides per City')\n",
    "plt.ylabel('Average Fare ($)')\n",
    "plt.annotate('.     Note: Circle size correlates to driver count per city',xy=(40,35))\n",
    "plt.legend(color_scheme)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "by_type = combined_pyber_data.groupby('type')['type', 'fare', 'ride_id', 'driver_count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "by_type = combined_pyber_data.groupby('type')['type', 'fare', 'ride_id', 'driver_count']\n",
    "fare_sum = by_type.sum()['fare']\n",
    "labels = fare_sum.index\n",
    "plt.title(\"%Total Fares by City Type\") \n",
    "colors = [city_color[n] for n in labels]\n",
    "explode = [0 , 0, .1]\n",
    "plt.pie(fare_sum, startangle = 90, colors = colors, explode = explode, labels = labels, autopct = \"%1.1f%%\", shadow = True, wedgeprops = {'linewidth': .5, 'edgecolor': 'black'})\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'numpy.int64' object has no attribute 'index'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-22-797a2a8d700f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mride_sum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcombined_pyber_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ride_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mcombined_pyber_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'type'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'type'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'fare'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ride_id'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ride_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mride_sum\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mride_sum\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpie\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mride_sum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstartangle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m90\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexplode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mautopct\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"%1.1f%%\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshadow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwedgeprops\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'linewidth'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'edgecolor'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'black'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'numpy.int64' object has no attribute 'index'"
     ]
    }
   ],
   "source": [
    "ride_sum = combined_pyber_data.count()['ride_id']\n",
    "combined_pyber_data.groupby('type')['type', 'fare', 'ride_id', 'ride_id']\n",
    "labels = ride_sum.index\n",
    "labels=ride_sum\n",
    "plt.pie(ride_sum, startangle = 90, explode = explode, colors = colors, labels = labels, autopct = \"%1.1f%%\", shadow = True, wedgeprops = {'linewidth': .5, 'edgecolor': 'black'})\n",
    "plt.title('% of Total Rides by City Type')\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "Pyber_city.drop_duplicates('city', keep = 'first')\n",
    "driver_sum = by_type.sum()['driver_count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>driver_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>type</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Rural</th>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Suburban</th>\n",
       "      <td>490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Urban</th>\n",
       "      <td>2405</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          driver_count\n",
       "type                  \n",
       "Rural               78\n",
       "Suburban           490\n",
       "Urban             2405"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "er=Pyber_city.groupby('type')['type', 'driver_count']\n",
    "\n",
    "er.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Pyber_city.drop_duplicates('city', keep = 'first')\n",
    "driver_sum = er.sum()['driver_count']\n",
    "labels = driver_sum.index\n",
    "plt.pie(driver_sum, startangle = 125, explode = explode, colors = colors, labels = labels, autopct = \"%1.1f%%\",wedgeprops = {'linewidth': .5, 'edgecolor': 'black'})\n",
    "plt.title('% of Total Drivers by City Type')\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare</th>\n",
       "      <th>ride_id</th>\n",
       "      <th>driver_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Rural</th>\n",
       "      <td>4327.93</td>\n",
       "      <td>580968240341287</td>\n",
       "      <td>537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Suburban</th>\n",
       "      <td>19356.33</td>\n",
       "      <td>3106884522576766</td>\n",
       "      <td>8570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Urban</th>\n",
       "      <td>39854.38</td>\n",
       "      <td>7919412664056093</td>\n",
       "      <td>59602</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              fare           ride_id  driver_count\n",
       "type                                              \n",
       "Rural      4327.93   580968240341287           537\n",
       "Suburban  19356.33  3106884522576766          8570\n",
       "Urban     39854.38  7919412664056093         59602"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "by_type.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "driver_sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "driver_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
